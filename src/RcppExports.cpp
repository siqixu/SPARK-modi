// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _SPARK_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _SPARK_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _SPARK_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _SPARK_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// SysMatEigen
SEXP SysMatEigen(SEXP Min);
RcppExport SEXP _SPARK_SysMatEigen(SEXP MinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Min(MinSEXP);
    rcpp_result_gen = Rcpp::wrap(SysMatEigen(Min));
    return rcpp_result_gen;
END_RCPP
}
// SparseSysMatEigen
SEXP SparseSysMatEigen(SEXP Min, SEXP num_topin);
RcppExport SEXP _SPARK_SparseSysMatEigen(SEXP MinSEXP, SEXP num_topinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Min(MinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type num_topin(num_topinSEXP);
    rcpp_result_gen = Rcpp::wrap(SparseSysMatEigen(Min, num_topin));
    return rcpp_result_gen;
END_RCPP
}
// CovariatesAI
SEXP CovariatesAI(SEXP Yin, SEXP Xin, SEXP Din, SEXP tauin, SEXP fixtauin, SEXP tolin);
RcppExport SEXP _SPARK_CovariatesAI(SEXP YinSEXP, SEXP XinSEXP, SEXP DinSEXP, SEXP tauinSEXP, SEXP fixtauinSEXP, SEXP tolinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Yin(YinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Xin(XinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tauin(tauinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fixtauin(fixtauinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tolin(tolinSEXP);
    rcpp_result_gen = Rcpp::wrap(CovariatesAI(Yin, Xin, Din, tauin, fixtauin, tolin));
    return rcpp_result_gen;
END_RCPP
}
// noCovariatesAI
SEXP noCovariatesAI(SEXP Yin, SEXP Xin, SEXP Din, SEXP tauin, SEXP fixtauin, SEXP tolin);
RcppExport SEXP _SPARK_noCovariatesAI(SEXP YinSEXP, SEXP XinSEXP, SEXP DinSEXP, SEXP tauinSEXP, SEXP fixtauinSEXP, SEXP tolinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Yin(YinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Xin(XinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tauin(tauinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fixtauin(fixtauinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tolin(tolinSEXP);
    rcpp_result_gen = Rcpp::wrap(noCovariatesAI(Yin, Xin, Din, tauin, fixtauin, tolin));
    return rcpp_result_gen;
END_RCPP
}
// ComputeTestQuantRcpp_nocov
SEXP ComputeTestQuantRcpp_nocov(SEXP yin, SEXP Pyin, SEXP cov_matin, SEXP Din, SEXP tauin);
RcppExport SEXP _SPARK_ComputeTestQuantRcpp_nocov(SEXP yinSEXP, SEXP PyinSEXP, SEXP cov_matinSEXP, SEXP DinSEXP, SEXP tauinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type yin(yinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Pyin(PyinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cov_matin(cov_matinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tauin(tauinSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeTestQuantRcpp_nocov(yin, Pyin, cov_matin, Din, tauin));
    return rcpp_result_gen;
END_RCPP
}
// ComputeTestQuantRcpp_cov
SEXP ComputeTestQuantRcpp_cov(SEXP yin, SEXP Pyin, SEXP Xin, SEXP cov_matin, SEXP Din, SEXP tauin);
RcppExport SEXP _SPARK_ComputeTestQuantRcpp_cov(SEXP yinSEXP, SEXP PyinSEXP, SEXP XinSEXP, SEXP cov_matinSEXP, SEXP DinSEXP, SEXP tauinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type yin(yinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Pyin(PyinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Xin(XinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cov_matin(cov_matinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tauin(tauinSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeTestQuantRcpp_cov(yin, Pyin, Xin, cov_matin, Din, tauin));
    return rcpp_result_gen;
END_RCPP
}
// ComputeTestQuantRcpp_Gaussian
SEXP ComputeTestQuantRcpp_Gaussian(SEXP yin, SEXP Pyin, SEXP Xin, SEXP cov_matin, SEXP Din, SEXP tauin);
RcppExport SEXP _SPARK_ComputeTestQuantRcpp_Gaussian(SEXP yinSEXP, SEXP PyinSEXP, SEXP XinSEXP, SEXP cov_matinSEXP, SEXP DinSEXP, SEXP tauinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type yin(yinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Pyin(PyinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Xin(XinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cov_matin(cov_matinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tauin(tauinSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeTestQuantRcpp_Gaussian(yin, Pyin, Xin, cov_matin, Din, tauin));
    return rcpp_result_gen;
END_RCPP
}
// ComputeWeightsRcpp
SEXP ComputeWeightsRcpp(SEXP Yin, SEXP num_kernelin, SEXP Phiin);
RcppExport SEXP _SPARK_ComputeWeightsRcpp(SEXP YinSEXP, SEXP num_kernelinSEXP, SEXP PhiinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Yin(YinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type num_kernelin(num_kernelinSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Phiin(PhiinSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeWeightsRcpp(Yin, num_kernelin, Phiin));
    return rcpp_result_gen;
END_RCPP
}
// sp_means_Rcpp
arma::vec sp_means_Rcpp(arma::sp_mat sp_data, bool rowMeans);
RcppExport SEXP _SPARK_sp_means_Rcpp(SEXP sp_dataSEXP, SEXP rowMeansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sp_data(sp_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type rowMeans(rowMeansSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_means_Rcpp(sp_data, rowMeans));
    return rcpp_result_gen;
END_RCPP
}
// sp_sums_Rcpp
arma::vec sp_sums_Rcpp(arma::sp_mat sp_data, bool rowSums);
RcppExport SEXP _SPARK_sp_sums_Rcpp(SEXP sp_dataSEXP, SEXP rowSumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sp_data(sp_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type rowSums(rowSumsSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_sums_Rcpp(sp_data, rowSums));
    return rcpp_result_gen;
END_RCPP
}
// sp_nz_count_Rcpp
arma::vec sp_nz_count_Rcpp(arma::sp_mat sp_data, bool rowNZ);
RcppExport SEXP _SPARK_sp_nz_count_Rcpp(SEXP sp_dataSEXP, SEXP rowNZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sp_data(sp_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type rowNZ(rowNZSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_nz_count_Rcpp(sp_data, rowNZ));
    return rcpp_result_gen;
END_RCPP
}
// sp_vars_Rcpp
arma::vec sp_vars_Rcpp(arma::sp_mat sp_data, bool rowVars);
RcppExport SEXP _SPARK_sp_vars_Rcpp(SEXP sp_dataSEXP, SEXP rowVarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sp_data(sp_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type rowVars(rowVarsSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_vars_Rcpp(sp_data, rowVars));
    return rcpp_result_gen;
END_RCPP
}
// ED_cpp
arma::mat ED_cpp(const arma::mat& x);
RcppExport SEXP _SPARK_ED_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ED_cpp(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SPARK_rcpparma_hello_world", (DL_FUNC) &_SPARK_rcpparma_hello_world, 0},
    {"_SPARK_rcpparma_outerproduct", (DL_FUNC) &_SPARK_rcpparma_outerproduct, 1},
    {"_SPARK_rcpparma_innerproduct", (DL_FUNC) &_SPARK_rcpparma_innerproduct, 1},
    {"_SPARK_rcpparma_bothproducts", (DL_FUNC) &_SPARK_rcpparma_bothproducts, 1},
    {"_SPARK_SysMatEigen", (DL_FUNC) &_SPARK_SysMatEigen, 1},
    {"_SPARK_SparseSysMatEigen", (DL_FUNC) &_SPARK_SparseSysMatEigen, 2},
    {"_SPARK_CovariatesAI", (DL_FUNC) &_SPARK_CovariatesAI, 6},
    {"_SPARK_noCovariatesAI", (DL_FUNC) &_SPARK_noCovariatesAI, 6},
    {"_SPARK_ComputeTestQuantRcpp_nocov", (DL_FUNC) &_SPARK_ComputeTestQuantRcpp_nocov, 5},
    {"_SPARK_ComputeTestQuantRcpp_cov", (DL_FUNC) &_SPARK_ComputeTestQuantRcpp_cov, 6},
    {"_SPARK_ComputeTestQuantRcpp_Gaussian", (DL_FUNC) &_SPARK_ComputeTestQuantRcpp_Gaussian, 6},
    {"_SPARK_ComputeWeightsRcpp", (DL_FUNC) &_SPARK_ComputeWeightsRcpp, 3},
    {"_SPARK_sp_means_Rcpp", (DL_FUNC) &_SPARK_sp_means_Rcpp, 2},
    {"_SPARK_sp_sums_Rcpp", (DL_FUNC) &_SPARK_sp_sums_Rcpp, 2},
    {"_SPARK_sp_nz_count_Rcpp", (DL_FUNC) &_SPARK_sp_nz_count_Rcpp, 2},
    {"_SPARK_sp_vars_Rcpp", (DL_FUNC) &_SPARK_sp_vars_Rcpp, 2},
    {"_SPARK_ED_cpp", (DL_FUNC) &_SPARK_ED_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SPARK(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
